openapi: 3.0.3
info:
  version: 1.0.0
  title: Todos
  contact:
    name: Todos
    url: https://github.com/herlianto-github/Todos
servers:
  - description: Server Todos
    url: https://localhost
paths:
  /users/register:
    post:
      summary: Create ID
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersSchema'
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
  /users/login:
    post:
      summary: Login ID
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: AndrewPrasetyo
                password:
                  type: string
                  example: Andrew123
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
  /users/{userId}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
    put:
      summary: Update by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Herlianto
                password:
                  type: string
                  example: herlianto123
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
    delete:
      summary: Delete by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
  /todos:
    post:
      summary: Create Todo
      tags:
        - Todo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projectID:
                  type: integer
                  example: 1
                Task:
                  type: string
                  example: makan ayam
                Status:
                  type: string
                  example: completed
                Description:
                  type: string
                  example: harus selesai tanggal 12 januari
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
    get:
      summary: Get all todos
      tags:
        - Todo
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
  /todos/{todoID}:
    get:
      summary: Get a user by ID
      tags:
        - Todo
      parameters:
        - name: todoID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
    put:
      summary: Update by ID
      tags:
        - Todo
      parameters:
        - name: todoID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projectID:
                  type: integer
                  example: 1
                Task:
                  type: string
                  example: makan sapi
                Status:
                  type: string
                  example: not completed
                Description:
                  type: string
                  example: harus selesai tanggal 14 januari
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
    delete:
      summary: Delete by ID
      tags:
        - Todo
      parameters:
        - name: todoID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
  /projects:
    post:
      summary: Create Project
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName:
                  type: string
                  example: Makan
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
    get:
      summary: Get all projects
      tags:
        - Project
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
  /projects/{projectID}:
    get:
      summary: Get a user by ID
      tags:
        - Project
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
    put:
      summary: Update by ID
      tags:
        - Project
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName:
                  type: string
                  example: Minum
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
    delete:
      summary: Delete by ID
      tags:
        - Project
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
    
    
components:
  responses:
    Response200:
      description: success create
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
    Response400:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Bad Request
    Response404:
      description: Not Fount
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 404
              message:
                type: string
                example: Not Found
  schemas:
    UsersSchema:
      type: object
      properties:
        name:
          type: string
          example: AndrewPrasetyo
        password:
          type: string
          example: Andrew123